//**@file FrontPage formset definitions
//
//    Copyright (C) Microsoft Corporation. All rights reserved.
//  SPDX-License-Identifier: BSD-2-Clause-Patent
//
//**/

#include <Guid/MsBootMenuGuid.h>

#include "FrontPageVfr.h"


// UEFI Front Page Formset
//
formset

  // Common Formset values
  //
  guid      = FRONT_PAGE_CONFIG_FORMSET_GUID,           // Formset GUID
  title     = STRING_TOKEN(STR_FRONT_PAGE_TITLE),       // Formset title (ex: "OEM UEFI")
  help      = STRING_TOKEN(STR_NULL_STRING),            // Formset help: None
  classguid = FRONT_PAGE_CONFIG_FORMSET_GUID,           // Formset class GUID
  class     = FRONT_PAGE_CLASS,                         // Formset class
  subclass  = FRONT_PAGE_SUBCLASS,                      // Formset subclass

  ////////////////////////////////
  // Varstores
  varstore FRONT_PAGE_UI_CONTROLS,
    varid = FRONT_PAGE_UI_CONTROLS_VARID,
    name = FrontPageUiControls,
    guid = FRONT_PAGE_CONFIG_FORMSET_GUID;

  /////////////////////////////////////////////////////////////////////////////
  // Form ID 0: Tablet/Phone Information
  //
  form formid = FRONT_PAGE_FORM_ID_PCINFO,              // Tablet/Phone Information form
    title  = STRING_TOKEN(STR_NULL_STRING);             // Form title: None

    // Tablet/Phone Information header
    //
    text
      help    = STRING_TOKEN(STR_NULL_STRING),                        // Tablet/Phone Information section header
      text    = STRING_TOKEN(STR_INF_VIEW_MODELINFO_HEADER);          //
    text
      help    = STRING_TOKEN(STR_NULL_STRING),                        // SPACING
      text    = STRING_TOKEN(STR_NULL_STRING);                        //

    // Group Tablet/Phone information name-value pairs in a grid on the canvas.  Note that the number of subtitle name-value
    // pairs must match the row & column information passed in via the Grid Opcode.
      //
    guidop
      guid     = GRID_START_OPCODE_GUID,                                 // Custom UI Grid opcode - START
      datatype = UINT32,                                                         //
      data     = 70,                                                             // Grid cell height in pixels.
    endguidop;
        subtitle text = STRING_TOKEN(STR_NULL_STRING),
        flags = HORIZONTAL;
          text                                                                   //
            help    = STRING_TOKEN(STR_NULL_STRING),                             // Device Manufacturer Name
            text    = STRING_TOKEN(STR_INF_VIEW_DEVICE_MANUFACTURER);            //
          text                                                                   //
            help    = STRING_TOKEN(STR_NULL_STRING),                             // Device Manufacturer Name Value
            text    = STRING_TOKEN(STR_INF_VIEW_DEVICE_MANUFACTURER_VALUE);      //
          text                                                                   //
            help    = STRING_TOKEN(STR_NULL_STRING),                             // Add a dummy 3rd column to move the 2nd column (values) further to the left.
            text    = STRING_TOKEN(STR_NULL_STRING);                             //
        subtitle text = STRING_TOKEN(STR_NULL_STRING),
        flags = HORIZONTAL;
          text                                                                   //
            help    = STRING_TOKEN(STR_NULL_STRING),                             // Device Name
            text    = STRING_TOKEN(STR_INF_VIEW_DEVICE);                         //
          text                                                                   //
            help    = STRING_TOKEN(STR_NULL_STRING),                             // Device Name Value
            text    = STRING_TOKEN(STR_INF_VIEW_DEVICE_VALUE);                   //
        subtitle text = STRING_TOKEN(STR_NULL_STRING),
        flags = HORIZONTAL;
          text                                                                   //
            help    = STRING_TOKEN(STR_NULL_STRING),                             // Tablet/Phone UUID
            text    = STRING_TOKEN(STR_INF_VIEW_PC_UUID);                        //
          text                                                                   //
            help    = STRING_TOKEN(STR_NULL_STRING),                             // Tablet/Phone UUID value
            text    = STRING_TOKEN(STR_INF_VIEW_PC_UUID_VALUE);                  //
        subtitle text = STRING_TOKEN(STR_NULL_STRING),
        flags = HORIZONTAL;
          text                                                                   //
            help    = STRING_TOKEN(STR_NULL_STRING),                             // Tablet/Phone Serial number
            text    = STRING_TOKEN(STR_INF_VIEW_PC_SERIALNUM);                   //
          text                                                                   //
            help    = STRING_TOKEN(STR_NULL_STRING),                             // Tablet/Phone Serial number value
            text    = STRING_TOKEN(STR_INF_VIEW_PC_SERIALNUM_VALUE);             //
        subtitle text = STRING_TOKEN(STR_NULL_STRING),
        flags = HORIZONTAL;
          text                                                                   //
            help    = STRING_TOKEN(STR_NULL_STRING),                             // Tablet/Phone Asset Tag
            text    = STRING_TOKEN(STR_INF_VIEW_PC_ASSET_TAG);                   //
          text                                                                   //
            help    = STRING_TOKEN(STR_NULL_STRING),                             // Tablet/Phone Asset Tag value
            text    = STRING_TOKEN(STR_INF_VIEW_PC_ASSET_TAG_VALUE);             //
    guidop
      guid     = GRID_END_OPCODE_GUID,                                           // Custom UI Grid opcode - END
    endguidop;

    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                   // SPACING
      text    = STRING_TOKEN(STR_NULL_STRING);                                   //
    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                   // SPACING
      text    = STRING_TOKEN(STR_NULL_STRING);                                   //
    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                   // SPACING
      text    = STRING_TOKEN(STR_NULL_STRING);                                   //

    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                   // Firmware Information section header
      text    = STRING_TOKEN(STR_INF_VIEW_FIRMWAREINFO_HEADER);                  //
    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                   // SPACING
      text    = STRING_TOKEN(STR_NULL_STRING);                                   //

    guidop
      guid     = GRID_START_OPCODE_GUID,                                         // Custom UI Grid opcode - START
      datatype = UINT32,                                                         //
      data     = 70,                                                             // Grid cell height in pixels.
    endguidop;
        subtitle text = STRING_TOKEN(STR_NULL_STRING),
        flags = HORIZONTAL;
          text
            help    = STRING_TOKEN(STR_NULL_STRING),                                   // Device Maintainer
            text    = STRING_TOKEN(STR_INF_VIEW_DEVICE_MAINTAINER);                    //
          text
            help    = STRING_TOKEN(STR_NULL_STRING),                                   // Device Maintainer Value
            text    = STRING_TOKEN(STR_INF_VIEW_DEVICE_MAINTAINER_VALUE);              //
          text
            help    = STRING_TOKEN(STR_NULL_STRING),                                   // SPACING
            text    = STRING_TOKEN(STR_NULL_STRING);                                   //
        subtitle text = STRING_TOKEN(STR_NULL_STRING),
        flags = HORIZONTAL;
          text
            help    = STRING_TOKEN(STR_NULL_STRING),                                   // UEFI Version
            text    = STRING_TOKEN(STR_INF_VIEW_UEFI_VERSION);                         //
          text
            help    = STRING_TOKEN(STR_NULL_STRING),                                   // UEFI Version Value
            text    = STRING_TOKEN(STR_INF_VIEW_UEFI_VERSION_VALUE);                   //
          text
            help    = STRING_TOKEN(STR_NULL_STRING),                                   // SPACING
            text    = STRING_TOKEN(STR_NULL_STRING);                                   //
        subtitle text = STRING_TOKEN(STR_NULL_STRING),
        flags = HORIZONTAL;
          text
            help    = STRING_TOKEN(STR_NULL_STRING),                                   // UEFI Build Date
            text    = STRING_TOKEN(STR_INF_VIEW_UEFI_BUILD_DATE);                      //
          text
            help    = STRING_TOKEN(STR_NULL_STRING),                                   // UEFI Build Date Value
            text    = STRING_TOKEN(STR_INF_VIEW_UEFI_BUILD_DATE_VALUE);                //
          text
            help    = STRING_TOKEN(STR_NULL_STRING),                                   // SPACING
            text    = STRING_TOKEN(STR_NULL_STRING);                                   //
    guidop
      guid     = GRID_END_OPCODE_GUID,                                           // Custom UI Grid opcode - END
    endguidop;

    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                   // SPACING
      text    = STRING_TOKEN(STR_NULL_STRING);                                   //
    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                   // SPACING
      text    = STRING_TOKEN(STR_NULL_STRING);                                   //
    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                   // SPACING
      text    = STRING_TOKEN(STR_NULL_STRING);                                   //

    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                   // Hardware Information section header
      text    = STRING_TOKEN(STR_INF_VIEW_HARWAREINFO_HEADER);                   //
    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                   // SPACING
      text    = STRING_TOKEN(STR_NULL_STRING);                                   //

    guidop
      guid     = GRID_START_OPCODE_GUID,                                         // Custom UI Grid opcode - START
      datatype = UINT32,                                                         //
      data     = 70,                                                             // Grid cell height in pixels.
    endguidop;
        subtitle text = STRING_TOKEN(STR_NULL_STRING),
        flags = HORIZONTAL;
          text
            help    = STRING_TOKEN(STR_NULL_STRING),                                   // SoC Manufacturer
            text    = STRING_TOKEN(STR_INF_VIEW_SOC_MANUFACTURER);                     //
          text
            help    = STRING_TOKEN(STR_NULL_STRING),                                   // SoC Manufacturer Value
            text    = STRING_TOKEN(STR_INF_VIEW_SOC_MANUFACTURER_VALUE);               //
          text
            help    = STRING_TOKEN(STR_NULL_STRING),                                   // SPACING
            text    = STRING_TOKEN(STR_NULL_STRING);                                   //
        subtitle text = STRING_TOKEN(STR_NULL_STRING),
        flags = HORIZONTAL;
          text
            help    = STRING_TOKEN(STR_NULL_STRING),                                   // SoC Model
            text    = STRING_TOKEN(STR_INF_VIEW_SOC_MODEL);                            //
          text
            help    = STRING_TOKEN(STR_NULL_STRING),                                   // SoC Model Value
            text    = STRING_TOKEN(STR_INF_VIEW_SOC_MODEL_VALUE);                      //
          text
            help    = STRING_TOKEN(STR_NULL_STRING),                                   // SPACING
            text    = STRING_TOKEN(STR_NULL_STRING);                                   //
    guidop
      guid     = GRID_END_OPCODE_GUID,                                           // Custom UI Grid opcode - END
    endguidop;

  endform;

  /////////////////////////////////////////////////////////////////////////////
  // Form ID 1: Security
  //
  form formid = FRONT_PAGE_FORM_ID_SECURITY,                             // Security form
    title  = STRING_TOKEN(STR_NULL_STRING);                              // Form title: None

    //
    // PRIMARY FORM
    // This form is the primary Security form, and is displayed whenever FrontPage is entered normally.
    // This form is hidden when we are post-security locks.
    //
    suppressif NOT ideqval  FrontPageUiControls.PostSecurityLocks == 0x00;
      // - System Password
      //
      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // System Password section header
        text    = STRING_TOKEN(STR_SEC_SYSTEM_PASSWORD_HEADING);                          //
      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // SPACING
        text    = STRING_TOKEN(STR_NULL_STRING);                                          //
      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // System Password description
        text    = STRING_TOKEN(STR_SEC_SYSTEM_PASSWORD_DESCRIPTION);                      //
      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // SPACING
        text    = STRING_TOKEN(STR_NULL_STRING);                                          //

      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // Set password button
        text    = STRING_TOKEN(STR_SEC_SYSTEM_PASSWORD_SET_BUTTON),                       //
        flags   = INTERACTIVE,                                                            // INTERACTIVE = Button
        key     = FRONT_PAGE_ACTION_SEC_SET_SYSTEM_PASSWORD;

      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // SPACING
        text    = STRING_TOKEN(STR_NULL_STRING);                                          //
      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // SPACING
        text    = STRING_TOKEN(STR_NULL_STRING);                                          //

      // - Secure Boot
      //
      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // Secure Boot section header
        text    = STRING_TOKEN(STR_SEC_SB_HEADING);                                       //

      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // SPACING
        text    = STRING_TOKEN(STR_NULL_STRING);                                          //

      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // Secure Boot State
        text    = STRING_TOKEN(STR_SEC_SB_STATE_TEXT);                                    // This will be filled in with the current state.

      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // SPACING
        text    = STRING_TOKEN(STR_NULL_STRING);                                          //

      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // Change SB config button
        text    = STRING_TOKEN(STR_SEC_SB_CHANGE_CONFIG_BUTTON),                          //
        flags   = INTERACTIVE,                                                            // INTERACTIVE = Button
        key     = FRONT_PAGE_ACTION_SEC_CHANGE_SB_CONFIG;

      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // SPACING
        text    = STRING_TOKEN(STR_NULL_STRING);                                          //

      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // "What is Secure Boot?" link
        text    = STRING_TOKEN(STR_SEC_SB_WHAT_IS_LINK),                                  //
        flags   = INTERACTIVE | READ_ONLY,                                                // INTERACTIVE = Button, READ_ONLY = Link-Style Button
        key     = FRONT_PAGE_ACTION_SEC_DISPLAY_SB_WHAT_IS;
      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // SPACING
        text    = STRING_TOKEN(STR_NULL_STRING);                                          //
      text
        help    = STRING_TOKEN(STR_NULL_STRING),                                          // SPACING
        text    = STRING_TOKEN(STR_NULL_STRING);                                          //
    endif; // suppressif NOT ideqval  FrontPageUiControls.PostSecurityLocks == 0x00;
    //
    // END PRIMARY FORM
    //

    //
    // POST SECURITY LOCKS FORM
    // This form is presented to the user if FrontPage is displayed post-security locks.
    // This form will indicate that security settings cannot be modified at this time
    // and that the user should reboot to modify security settings.
    //
    suppressif ideqval  FrontPageUiControls.PostSecurityLocks == 0x00;

      text
        help = STRING_TOKEN(STR_NULL_STRING),                                   // Section Header
        text = STRING_TOKEN(STR_SEC_POST_SEC_LOCK_HEADING);                     //

      text
        help = STRING_TOKEN(STR_NULL_STRING),                                   // SPACING
        text = STRING_TOKEN(STR_NULL_STRING);                                   //

      text
        help = STRING_TOKEN(STR_NULL_STRING),                                   // PostSecurityLocks description
        text = STRING_TOKEN(STR_SEC_POST_SEC_LOCK_TEXT);                        //

      text
        help = STRING_TOKEN(STR_NULL_STRING),                                   // SPACING
        text = STRING_TOKEN(STR_NULL_STRING);                                   //

      text
        help  = STRING_TOKEN(STR_NULL_STRING),                                  // Restart button
        text  = STRING_TOKEN(STR_SEC_POST_SEC_LOCK_BUTTON),                     //
        flags = INTERACTIVE,                                                    // INTERACTIVE = Button
        key   = FRONT_PAGE_ACTION_REBOOT_TO_FRONTPAGE;

    endif;  // suppressif ideqval  FrontPageUiControls.PostSecurityLocks == 0x00
    //
    // END POST SECURITY LOCKS FORM
    //

    // FORCE UPDATE SECTION
    // This section can change opcodes to force the rendering engine to redraw the form.
    label   LABEL_UPDATE_SECURITY_START;
    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                          // SPACING
      text    = STRING_TOKEN(STR_NULL_STRING);                                          //
    label   LABEL_UPDATE_SECURITY_END;
  endform;

  /////////////////////////////////////////////////////////////////////////////
  // Form ID 2: Exit
  //
  form formid = FRONT_PAGE_FORM_ID_EXIT,                                                // Exit form
    title  = STRING_TOKEN(STR_NULL_STRING);                                             // Form title: None

    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                          // Exit FrontPage settings header
      text    = STRING_TOKEN(STR_FP_EXIT_HEADER);                                       //
    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                          // SPACING
      text    = STRING_TOKEN(STR_NULL_STRING);                                          //
    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                          // Exit FrontPage settings description
      text    = STRING_TOKEN(STR_FP_EXIT_DESCRIPTION);                                  //
    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                          // SPACING
      text    = STRING_TOKEN(STR_NULL_STRING);                                          //

    text
      help    = STRING_TOKEN(STR_NULL_STRING),                                          // "Restart now" button
      text    = STRING_TOKEN(STR_FP_RESTART_NOW_BUTTON),                                //
      flags   = INTERACTIVE | RESET_REQUIRED,
      key     = FRONT_PAGE_ACTION_EXIT_FRONTPAGE;
  endform;

  /////////////////////////////////////////////////////////////////////////////
  // Form ID 3: Power Off
  //
  form formid = FRONT_PAGE_FORM_ID_POWEROFF,                                            // Power Off form
    title  = STRING_TOKEN(STR_NULL_STRING);                                             // Form title: None
  endform;

endformset;
